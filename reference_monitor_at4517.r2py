
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"
mycontext['lock'] = createlock()
class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['lock'].acquire(True)
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
   
    # make the files and add 'SE' to the readat file...
    if create: #If Create:T
      if self.Afn in listfiles(): 
      #If Create:T & Exists:T
        self.Afile = openfile(self.Afn, create)
        self.Bfile = openfile(self.Bfn, create)
      else: #If Create:T & Exists:F
        self.Afile = openfile(self.Afn, create)
        self.Bfile = openfile(self.Bfn, create)
        self.Afile.writeat('SE', 0)
        self.Bfile.writeat('SE', 0) 
    else:
      try:
        if self.Afn in listfiles():
          self.Afile = openfile(self.Afn, create)
          self.Bfile = openfile(self.Bfn, create)
      except FileNotFoundError:
        pass

#------------------------------------------------------------------------------
  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
    try:
      if len(self.Bfile.readat(None, 0)) >= offset:
        self.Bfile.writeat(data,offset)
    except SeekPastEndOfFileError:
      pass
    
#------------------------------------------------------------------------------    
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(None, 0)
#------------------------------------------------------------------------------
  def close(self):
    bData = self.Bfile.readat(None, 0)
    if bData[0] == "S" and bData[-1:] == "E":
      #self.Afile.close()
      #self.Bfile.close()
      #self.Afile = openfile(self.Afn, True)
      self.Afile.writeat(bData, 0)
      self.Afile.close()
      self.Bfile.close()
    else:
      self.Afile.close()
      self.Bfile.close()
    mycontext['lock'].release()
    
#------------------------------------------------------------------------------  
def ABopenfile(filename, create):
  return ABFile(filename,create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()